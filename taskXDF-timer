#! /bin/bash

# This interval timer script executes taskXDF in the same folder.
# To avoid having to provide a password to edit the app_config.xml file,
#   make yourself a member of the boinc permissions group. $ sudo usermod -a -G boinc yourusername
#   and be sure that the boinc group has write permission to the app_config file:
#    -rw-rw-r-- 1 boinc boinc 1523 Aug 23 08:02 /var/lib/boinc-client/projects/einstein.phys.uwm.edu/app_config.xml
#  After adding yourself to the boinc group, a system reboot is needed for the new permissions to take effect.

# Running a timer script can sidestep the need for setting up a systemd .service and .timer,
#   but you will need to manually launch this timer script after each reboot.
# TIP: Run taskXDF-timer on a 60 sec interval to get responsive task X changes.

time_arg=$1

# Need to read configuration settings and create .log in case it is not present.
. ./taskXDF.cfg
touch "$log_file"

target=taskXDF
script="$(basename -- $0)"
version='0.7.1'

if ((time_arg > 0 && time_arg < 60)); then
    time_arg=60
    echo "Interval time parameter cannot be less than 60 seconds."
    echo "   Values between 0 and 60 will be converted to 60."
    echo "TIP: A value of zero is an alternative to the --status argument."
fi

# Terminal font colors are defined in .cfg.
go=false
if  [[ $time_arg == --header ]]; then
    echo
    echo "Report header:"
    echo -n "date     time   │ queued │ VRAM% │ GTT% │ taskGB │ X │ "
    printf "DFs: ${blue}[running]${nc} ${orng}[waiting]${nc} ${brn}[ready]${nc}\n"
    echo "Datetime of $target script execution
————————————————│ queued: total # of tasks
—————————————————————————│ %'s: high card, max GPU memory in use
————————————————————————————————————————│ taskGB: high card, avg task VRAM GB used
—————————————————————————————————————————————————│ X: current task multiple
—————————————————————————————————————————————————————│ Delta Frequencies of GW tasks"
    echo "NOTES:"
    echo "'High card' is the card with the highest value among all active cards."
    echo "DF values are listed from most progressed to least progessed tasks."
    echo "When all running DFs are equal, taskGB is the GB requirement of that DF."
    printf "${brn}'ready' is next task 'Ready to run', one listed for each active card.${nc}\n\n"
    exit 0

elif [[ $time_arg == 0 ]] || [[ $time_arg == --status ]]; then
    echo "
    With an argument of $time_arg, $script is executed in status-only mode."
    /bin/bash ./$target --status
    exit 0

elif [[ $# != 1 ]] ||
    [[ $time_arg =~ -help ]] ||
    [[ $time_arg =~ [.] ]]; then
    echo "
    A time interval, in seconds, for running the taskXDF-timer script is required
        to automate changes to task X.
    e.g., $0 60
    Values less than 60 will be converted to 60. Decimal seconds are invalid.

    Optional arguments: --header --status --help
        --header provides explanation of types of interval data reported; no interval time needed.
        --status provides current boinc and GPU run metrics; does not change task X.
        --help brings up this message.

    This timer script provides continuous timed runs of the taskXDF bash script.

    A time interval of 0 (zero) provides a one-off status report from $target,
        otherwise a non-zero interval time provides interval reports and taskX adjustments.

    To monitor task status on a regular interval without changing task X, edit the
        taskXDF.cfg file to monitor_only=yes (default is 'no').

    Supported AMD GPUs: Ellesmere, Polaris, Vega, or Navi that are running
        Einstein@Home O3AS gravitational wave GPU tasks.
    Script WILL NOT WORK properly if CPU tasks are queued.

    A log file of Terminal output is created in the current folder.

    Numerous script run parameters can be configured in the taskXDF.cfg text file.

    Version: $version"
    echo
    exit 0

# Need to catch any unexpected argument that's made it this far...
elif [[ $time_arg =~ [^0-9] ]]; then
    echo "Invalid parameter of \"$time_arg\". Try: $0 --help"
    exit 0

else
# Initiate the infinite while loop for interval timing.
    go=true
fi

# Provide an initial information message when timer is started.
echo "Currently running $script to execute $target on an interval of $time_arg seconds.
(can be stopped with CTRL+C)
A report is issued every $report_int interval cycles, as set in the $target.cfg file." | tee -a $log_file

# monitor_only is set in .cfg file.
if [[ $monitor_only == yes ]]; then
    echo "Running in monitor mode, as set in $target.cfg. Task X will not be changed,
    but auto-suspend of long-running tasks is active if set in $target.cfg." | tee -a $log_file
elif [[ $monitor_only == no ]]; then
    echo "Running..."
fi
echo

echo -n "date   time     │ queued │ VRAM% │ GTT% │ taskGB │ X │ "
printf "DFs: ${blue}[running]${nc} ${orng}[waiting]${nc} ${brn}[ready]${nc}\n"
echo -n "————————————————│————————│———————│——————│————————│———│"
echo "————————————————————————————————————————"

# Run continuously until manually stopped. Runs the taskXDF (target) bash script each cycle.
# The --go argument is used as a tag so that time interval value can be passed to $target for time calculations.
# The cycle arg passes the cycle count to $target so that $report_int can be used.
# A reminder is provided for how to stop once every 120 interval cycles of the main script. (expect a 60 sec. cycle)
# The actual number of status reports between reminders depends on the $report_int setting in the .cfg file.
#   The reminder cycle interval, (( cycle == digit )), can be set to the user's liking.
cycle=0
yikes=0
report_t=$(bc <<<"scale=1; $time_arg * $report_int / 60")
while [[ $go == true ]]
do
    /bin/bash ./${target} --go${time_arg} $cycle
    sleep $time_arg
    ((cycle++))
    ((yikes++))
    if  [[ $cycle == 120 ]] ; then
        echo ">> $script is executing $target every $time_arg seconds; $target reports every $report_t minutes. <<
        (can be stopped with CTRL+C)" | tee -a $log_file
        echo
        echo -n "date   time     │ queued │ VRAM% │ GTT% │ taskGB │ X │ " | tee -a $log_file
        printf "DFs: ${blue}[running]${nc} ${orng}[waiting]${nc} ${brn}[ready]${nc}\n" | tee -a $log_file
        echo -n "————————————————│————————│———————│——————│————————│———│" | tee -a $log_file
        echo "————————————————————————————————————————" | tee -a $log_file
        cycle=0
    fi
    if ((yikes >= 2 * 10**4)); then
        days=$((time_arg * yikes / 60 / 24))
        echo "   **** YIKES! $script has been running for $yikes cycles, $days days. ****
        Restart $script to get rid of this annoying reminder." | tee -a $log_file
#        echo "Just in case you forgot about me, I will EXIT NOW...." | tee -a $log_file
        echo
#        exit 0
    fi
done
